#!/usr/bin/env php
<?php

/* Copyright (C) 2015-2016 othmar52 <othmar52@users.noreply.github.com>
 *
 * This file is part of sliMpd - a php based mpd web client
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* TODO: currently there is no check of any update status
 * TODO: remove dead items after update
 * TODO: instead of heaving multiple update-cli.php scripts merge the together with a procedural logic
 * TODO: move memory_limit - value to config
 */
if(PHP_SAPI !== 'cli') {
	header('HTTP/1.0 403 Forbidden');
	echo "Sorry, execution is not allowed via http...";
	die();
}


ini_set('max_execution_time', 0);
ini_set('memory_limit', '4096M');
define('DS', DIRECTORY_SEPARATOR);
define('APP_ROOT', __DIR__ . DS);

chdir(dirname(__DIR__)); // set directory to root

require_once 'vendor-dist' . DS . 'autoload.php';
require_once 'php' . DS . 'autoload.php';
require_once 'php' . DS . 'libs' . DS . 'shims' . DS . 'GeneralUtility.php';
require_once 'php' . DS . 'libs' . DS . 'shims' . DS . 'StringUtility.php';
require_once 'php' . DS . 'libs' . DS . 'shims' . DS . 'FilesystemUtility.php';
require_once 'php' . DS . 'libs' . DS . 'shims' . DS . 'CompareImages.php';
require_once 'php' . DS . 'libs' . DS . 'shims' . DS . 'RegexHelper.php';
date_default_timezone_set('Europe/Vienna');


// convert all the command line arguments into a URL
$argv = $GLOBALS['argv'];
array_shift($GLOBALS['argv']);
$pathInfo = '/' . implode('/', $argv);


// Create our app instance
$app = new Slim\Slim([
	'debug' => false,  // Turn off Slim's own PrettyExceptions
]);

// Set up the environment so that Slim can route
$app->environment = Slim\Environment::mock([
	'PATH_INFO'   => $pathInfo
]);


// CLI-compatible not found error handler
$app->notFound(function () use ($app) {
	$url = $app->environment['PATH_INFO'];
	cliLog($app->ll->str('cli.arg.invalid', [ltrim($url, '/')]));
	cliLog('');
	renderCliHelp();
	$app->stop();
});

// Format errors for CLI
$app->error(function (\Exception $e) use ($app) {
	echo $e;
	// delete cached config
	$app->configLoaderINI->loadConfig('master.ini', NULL, '1');
	$app->stop();
});


// LOAD MODULES
call_user_func(function() use ($app) {
	$path = APP_ROOT . 'php' . DS . 'Modules' . DS;
	foreach (scandir($path) as $dir) {
		// suppress warning with "@" and avoid tons of is_file()-checks 
		@include_once($path . $dir . DS . 'class.php');
	}
});

$config = $app->configLoaderINI->loadConfig('master.ini');

$noCache = FALSE;
$clearCacheFor = [
	"/update", "/hard-reset", "/remigrate"
];
if(in_array(\Slim\Environment::getInstance()->offsetGet("PATH_INFO"), $clearCacheFor) === TRUE) {
	$noCache = TRUE;
}

$config = $app->configLoaderINI->loadConfig('master.ini', NULL, $noCache);
\Slimpd\Modules\localization\Localization::setLocaleByLangKey($config['config']['langkey']);


$config['root'] = $config['config']['absRefPrefix'];
$config['fileroot'] = $config['config']['absFilePrefix'];
$app->config = $config;
$vars = $config;


$app->config = $vars;

// LOAD CONTROLLERS
call_user_func(function() use ($app, $vars) {
	$path = APP_ROOT . 'php' . DS . 'Modules' . DS;
	foreach (scandir($path) as $dir) {
		// suppress warning with "@" and avoid tons of is_file()-checks 
		@include_once($path . $dir . DS . 'controller.php');
	}
});

// DEFINE CLI routes
include_once APP_ROOT . 'php' . DS . 'routes' . DS . 'cli.php';

// run!
$app->run();
